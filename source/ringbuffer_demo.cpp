/*********************************************************************************
 * @file		ringbuffer_demo.cpp
 * @brief		ringbuffer_demo belongs to zltest
 * @details		ringbuffer_demo belongs to zltest
 * @author		zhenglei
 * @date		2021/09/16
 * @copyright	Copyright (c) 2021 Gohigh V2X Division.
 * @verbatim
 *
 *  Change History:
 *  Date      Author    Version  ChangeId           Description
 *  ------------------------------------------------------------------------------
 *  2021/09/16 zhenglei       1.0       ————             Create this file
 *
 * @endverbatim
 ********************************************************************************/
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/time.h>
#include "asyncwork.hpp"
#include "ringbuffer.hpp"
#include <thread>
#include <signal.h>

#define RINGBUFFER_MAIN main


static const unsigned char g_crc_table_8[] =
{
    0x00,0x31,0x62,0x53,0xc4,0xf5,0xa6,0x97,0xb9,0x88,0xdb,0xea,0x7d,0x4c,0x1f,0x2e,
    0x43,0x72,0x21,0x10,0x87,0xb6,0xe5,0xd4,0xfa,0xcb,0x98,0xa9,0x3e,0x0f,0x5c,0x6d,
    0x86,0xb7,0xe4,0xd5,0x42,0x73,0x20,0x11,0x3f,0x0e,0x5d,0x6c,0xfb,0xca,0x99,0xa8,
    0xc5,0xf4,0xa7,0x96,0x01,0x30,0x63,0x52,0x7c,0x4d,0x1e,0x2f,0xb8,0x89,0xda,0xeb,
    0x3d,0x0c,0x5f,0x6e,0xf9,0xc8,0x9b,0xaa,0x84,0xb5,0xe6,0xd7,0x40,0x71,0x22,0x13,
    0x7e,0x4f,0x1c,0x2d,0xba,0x8b,0xd8,0xe9,0xc7,0xf6,0xa5,0x94,0x03,0x32,0x61,0x50,
    0xbb,0x8a,0xd9,0xe8,0x7f,0x4e,0x1d,0x2c,0x02,0x33,0x60,0x51,0xc6,0xf7,0xa4,0x95,
    0xf8,0xc9,0x9a,0xab,0x3c,0x0d,0x5e,0x6f,0x41,0x70,0x23,0x12,0x85,0xb4,0xe7,0xd6,
    0x7a,0x4b,0x18,0x29,0xbe,0x8f,0xdc,0xed,0xc3,0xf2,0xa1,0x90,0x07,0x36,0x65,0x54,
    0x39,0x08,0x5b,0x6a,0xfd,0xcc,0x9f,0xae,0x80,0xb1,0xe2,0xd3,0x44,0x75,0x26,0x17,
    0xfc,0xcd,0x9e,0xaf,0x38,0x09,0x5a,0x6b,0x45,0x74,0x27,0x16,0x81,0xb0,0xe3,0xd2,
    0xbf,0x8e,0xdd,0xec,0x7b,0x4a,0x19,0x28,0x06,0x37,0x64,0x55,0xc2,0xf3,0xa0,0x91,
    0x47,0x76,0x25,0x14,0x83,0xb2,0xe1,0xd0,0xfe,0xcf,0x9c,0xad,0x3a,0x0b,0x58,0x69,
    0x04,0x35,0x66,0x57,0xc0,0xf1,0xa2,0x93,0xbd,0x8c,0xdf,0xee,0x79,0x48,0x1b,0x2a,
    0xc1,0xf0,0xa3,0x92,0x05,0x34,0x67,0x56,0x78,0x49,0x1a,0x2b,0xbc,0x8d,0xde,0xef,
    0x82,0xb3,0xe0,0xd1,0x46,0x77,0x24,0x15,0x3b,0x0a,0x59,0x68,0xff,0xce,0x9d,0xac
};

uint8_t calc_crc_table_8(uint8_t *ptr, int len)
{
    unsigned char crc = 0x00;

    while (len--)
    {
        crc = g_crc_table_8[crc ^ *ptr++];
    }
    return (crc);
}

static uint16_t const g_crc_table_16[256] =
{
    0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
    0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
    0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
    0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
    0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
    0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
    0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
    0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
    0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
    0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
    0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
    0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
    0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
    0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
    0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
    0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
    0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
    0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
    0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
    0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
    0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
    0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
    0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
    0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
    0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
    0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
    0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
    0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t calc_crc_table_16(uint8_t* dataIn, int length)
{
    uint16_t result = 0;
    uint16_t tableNo = 0;

    for(int i = 0; i < length; i++)
    {
        tableNo = ((result & 0xff) ^ (dataIn[i] & 0xff));
        result = ((result >> 8) & 0xff) ^ g_crc_table_16[tableNo];
    }

    return result;
}

static const uint32_t g_crc_table_32[256] =
{
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t calc_crc_table_32 (uint8_t *pStart, int uSize)
{
#define INIT  0xffffffff
#define XOROT 0xffffffff

    uint32_t uCRCValue;
    uint8_t *pData;

    /* init the start value */
    uCRCValue = INIT;
    pData = pStart;

    /* calculate CRC */
    while (uSize --)
    {
        uCRCValue = g_crc_table_32[(uCRCValue ^ *pData++) & 0xFF] ^ (uCRCValue >> 8);
    }
    /* XOR the output value */
    return uCRCValue ^ XOROT;
}

class CTimer
{
public:
    CTimer()
    {
        return;
    }
    ~CTimer()
    {
        return;
    }
    void tick_start(void)
    {
        gettimeofday(&startTV,NULL);
        return;
    }
    long get_us(void)
    {
        struct timeval tv;
        gettimeofday(&tv,NULL);
        return (tv.tv_sec - startTV.tv_sec) * 1000000 + tv.tv_usec - startTV.tv_usec;
    }
private:
    struct timeval startTV;
};

using UINT8 = unsigned char;
using UINT16 = unsigned short;

UINT8 crc_cal(UINT8 *ptr, int size, UINT8 init_crc)
{
    UINT8 crc = init_crc;
    while (size>0)
    {
        for (int i = 0; i < 8; i++)
        {
            if ((crc ^ *ptr) & (0x80))
            {
                crc = 0x31 ^ (crc<<1);
            }
            else
            {
                crc<<=1;
            }
            *ptr = *ptr<<1;
        }
        size--;
        ptr++;
    }
    return crc;
}

UINT8 crc_cal_ver2(UINT8 *ptr, int size, UINT8 init_crc)
{
    UINT8 crc = init_crc;
    while (size--)
    {
        crc = g_crc_table_8[crc ^ *ptr++];
    }
    return (crc);
}


std::tuple<long, long, UINT8> write_proc(RingBuffer &buf, int period_ms, int cnt, int times)
{
    char tmp[100];
    UINT32 write_cnt = 0;
    int write_cnt_success = 0;
    long write_ret = 0;
    CTimer timer;
    long time_sum = 0;
    long time = 0;
    UINT8 crc = 0;
    std::cout<<"period_ms = "<<period_ms<<" cnt ="<<cnt<<" times = "<<times<<std::endl;

    timer.tick_start();
    for (int i = 0; i < times; i++)
    {
        timer.tick_start();
        for (int j = 0; j < cnt; j++)
        {
            write_cnt = snprintf(tmp, 99, "write_thread %08ld\n", time);
            write_cnt_success = buf.write_buf(tmp, write_cnt);
            write_ret += (write_cnt_success == -1) ? 0 : write_cnt_success;

            crc = crc_cal_ver2((UINT8 *)tmp, write_cnt_success, crc);
        }
        time = timer.get_us();
        time_sum +=time;
        if (time < period_ms * 1000)
        {
            usleep(period_ms * 1000 - time);
        }
    }
    return std::tuple<long, long, UINT8>(write_ret, time_sum, crc);
}

volatile bool intp = false;
void sig_proc(int sig)
{
    std::cout<<"exit "<<getpid()<<" sig "<<sig<<std::endl;
    intp=true;
    return;
}

std::tuple<long, long, UINT8> print_proc(RingBuffer &buf, int period_ms, int times, FILE *fd)
{
    char tmp[1024];
    UINT32 read_cnt;
    long read_ret = 0;
    CTimer timer;
    long time_sum = 0;
    long time = 0;
    int rate_limite = 2000 * period_ms / 1000; //rate limite 200 KB/s
    UINT8 crc = 0;

    signal(SIGINT, sig_proc);

    printf("period_ms = %i, times = %i, rate_limite = %i\n", period_ms, times, rate_limite * 1000);

    for (int i = 0; ((i < times) && (intp==false)); i++)
    {
        timer.tick_start();
        std::cout<<"time = "<<time<<" ";
        buf.print_head(0);
        for (int j = 0; j < rate_limite; j++)
        {
            read_cnt = buf.read_buf(tmp, 1000);
            if (read_cnt > 0)
            {
                crc = crc_cal_ver2((UINT8 *)tmp, read_cnt, crc);
                read_ret += read_cnt;
                if (fd != NULL)
                {
                    fwrite(tmp, 1, read_cnt, fd);
                }
            }
            else
            {
                break;
            }
        }
        time = timer.get_us();
        time_sum += time;
        usleep(period_ms * 1000 - time);
    }
    return std::make_tuple(read_ret, time_sum, crc);
}

int RINGBUFFER_MAIN(int argc, char *argv[])
{
    if ((argc == 5) && (*argv[1] == 'r'))
    {
        int peroid = std::stoi(argv[2]);
        int times = std::stoi(argv[3]);
        std::string mod(argv[4]);
        RingBufferShm ringbuf_r(RING_BUFFER_SIZE);
        FILE *fd = NULL;

        if (mod == "file")
        {
            fd = fopen("/root/zltest.log", "wb+");
        }
        else if (mod == "screen")
        {
            fd = stdout;
        }

        ringbuf_r.init("test", "/root/shm", 0);
        ringbuf_r.print_head();
        auto ret = print_proc(ringbuf_r, peroid, times, fd);
        printf("read cnt = %li proc times = %li crc = %x\n", std::get<0>(ret), std::get<1>(ret), std::get<2>(ret));
    }
    else if ((argc == 5) && (*argv[1] == 'w'))
    {
        int peroid = std::stoi(argv[2]);
        int cnt = std::stoi(argv[3]);
        int times = std::stoi(argv[4]);
        RingBufferShm ringbuf_w(RING_BUFFER_SIZE);
        long write_cnt, time_sum;
        UINT8 crc;

        ringbuf_w.init("test", "/root/shm", 0);
        ringbuf_w.clear_statistics();
        ringbuf_w.print_head();
        auto ret = write_proc(ringbuf_w, peroid, cnt, times);
        std::tie(write_cnt, time_sum, crc) = ret;
        printf("write cnt = %li proc times = %li crc = %x\n", write_cnt, time_sum, crc);
    }
    else
    {
        printf("USAGE:\n");
        printf("%s r 100 20 null\n", argv[0]);
        printf("%s w 10 100 100\n", argv[0]);
        printf("long size = %d\n", sizeof(long));
    }
    return 0;
}



